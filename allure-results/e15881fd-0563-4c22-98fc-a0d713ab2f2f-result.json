{"name": "test_login_invalid_pwd", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//div[@id=\"menu\"]//li//a[span[text()='Login']]\"}\n  (Session info: chrome=126.0.6478.127); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nStacktrace:\n\tGetHandleVerifier [0x00007FF70C54EEA2+31554]\n\t(No symbol) [0x00007FF70C4C7ED9]\n\t(No symbol) [0x00007FF70C38872A]\n\t(No symbol) [0x00007FF70C3D8434]\n\t(No symbol) [0x00007FF70C3D853C]\n\t(No symbol) [0x00007FF70C41F6A7]\n\t(No symbol) [0x00007FF70C3FD06F]\n\t(No symbol) [0x00007FF70C41C977]\n\t(No symbol) [0x00007FF70C3FCDD3]\n\t(No symbol) [0x00007FF70C3CA33B]\n\t(No symbol) [0x00007FF70C3CAED1]\n\tGetHandleVerifier [0x00007FF70C858B1D+3217341]\n\tGetHandleVerifier [0x00007FF70C8A5AE3+3532675]\n\tGetHandleVerifier [0x00007FF70C89B0E0+3489152]\n\tGetHandleVerifier [0x00007FF70C5FE776+750614]\n\t(No symbol) [0x00007FF70C4D375F]\n\t(No symbol) [0x00007FF70C4CEB14]\n\t(No symbol) [0x00007FF70C4CECA2]\n\t(No symbol) [0x00007FF70C4BE16F]\n\tBaseThreadInitThunk [0x00007FFA0949257D+29]\n\tRtlUserThreadStart [0x00007FFA0A60AF28+40]", "trace": "self = <tests.test_login.TestLogin object at 0x000001F7D122BA10>\n\n    def test_login_invalid_pwd(self):\n        '''\n        User cannot log into Railway with invalid password.\n        :return:\n        '''\n        user = User(get_info_user(\"valid_mail\"), get_info_user(\"invalid_pwd\"))\n>       self.login_page.select_tab(TabName.LOGIN.value)\n\ntests\\test_login.py:46: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nbase\\base_page.py:41: in select_tab\n    Action(self.driver).click(xpath)\nutils\\actions.py:9: in click\n    self.scroll(xpath)\nutils\\actions.py:22: in scroll\n    element = self.driver.find_element(By.XPATH, xpath)\nC:\\Users\\ADMIN\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:738: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nC:\\Users\\ADMIN\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001F7D11FDB90>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...07FF70C4BE16F]\\\\n\\\\tBaseThreadInitThunk [0x00007FFA0949257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFA0A60AF28+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//div[@id=\"menu\"]//li//a[span[text()='Login']]\"}\nE         (Session info: chrome=126.0.6478.127); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF70C54EEA2+31554]\nE       \t(No symbol) [0x00007FF70C4C7ED9]\nE       \t(No symbol) [0x00007FF70C38872A]\nE       \t(No symbol) [0x00007FF70C3D8434]\nE       \t(No symbol) [0x00007FF70C3D853C]\nE       \t(No symbol) [0x00007FF70C41F6A7]\nE       \t(No symbol) [0x00007FF70C3FD06F]\nE       \t(No symbol) [0x00007FF70C41C977]\nE       \t(No symbol) [0x00007FF70C3FCDD3]\nE       \t(No symbol) [0x00007FF70C3CA33B]\nE       \t(No symbol) [0x00007FF70C3CAED1]\nE       \tGetHandleVerifier [0x00007FF70C858B1D+3217341]\nE       \tGetHandleVerifier [0x00007FF70C8A5AE3+3532675]\nE       \tGetHandleVerifier [0x00007FF70C89B0E0+3489152]\nE       \tGetHandleVerifier [0x00007FF70C5FE776+750614]\nE       \t(No symbol) [0x00007FF70C4D375F]\nE       \t(No symbol) [0x00007FF70C4CEB14]\nE       \t(No symbol) [0x00007FF70C4CECA2]\nE       \t(No symbol) [0x00007FF70C4BE16F]\nE       \tBaseThreadInitThunk [0x00007FFA0949257D+29]\nE       \tRtlUserThreadStart [0x00007FFA0A60AF28+40]\n\nC:\\Users\\ADMIN\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: NoSuchElementException"}, "description": "\n        User cannot log into Railway with invalid password.\n        :return:\n        ", "attachments": [{"name": "screenshot", "source": "243f206e-2808-49aa-9528-78a19034bde1-attachment.png", "type": "image/png"}], "start": 1721016469705, "stop": 1721016469705, "uuid": "7637a1a5-0866-41ee-b3ba-b68c9516ca2d", "historyId": "100ccbdb43bda6e72274a719705810b8", "testCaseId": "100ccbdb43bda6e72274a719705810b8", "fullName": "tests.test_login.TestLogin#test_login_invalid_pwd", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('setup_and_teardown')"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_login"}, {"name": "subSuite", "value": "TestLogin"}, {"name": "host", "value": "DUYEN"}, {"name": "thread", "value": "23824-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_login"}]}